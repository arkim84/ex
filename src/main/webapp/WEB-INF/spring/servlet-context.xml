<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:social="http://www.springframework.org/schema/social"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.3.xsd
		http://www.springframework.org/schema/social http://www.springframework.org/schema/social/spring-social-1.1.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<beans:bean id="connectionFactory" class="org.springframework.social.facebook.connect.FacebookConnectionFactory">
		<beans:constructor-arg value="1467995930164714" />
		<beans:constructor-arg value="8cfd3c9d89a17c709d4864a3f193eb99" />
	</beans:bean>
		
	<beans:bean id="oAuth2Parameters" class="org.springframework.social.oauth2.OAuth2Parameters">
		<beans:property name="scope" value="email"/>
		<beans:property name="redirectUri" value="http://localhost:8080"/>
	</beans:bean>
	
	<context:component-scan base-package="org.zerock"/>
	
	<beans:bean id="loginInterceptor" class="org.zerock.common.LoginInterceptor"></beans:bean>
	
	<interceptors>
		<interceptor>
			<mapping path="/*"/>
			<beans:ref bean="loginInterceptor"/>
		</interceptor>
	</interceptors>
	
	
	<!-- RabbitMQ 연결 설정 -->
	<rabbit:connection-factory id="rabbitConnectionFactory" host="127.0.0.1" port="5672" username="guest" password="guest"/>
	        
	<rabbit:admin connection-factory="rabbitConnectionFactory"/>
	 
	<!-- Queue 등록 -->
	<rabbit:queue name="myQueue"/>
	    
	<!-- Queue 바인딩 -->
	<rabbit:direct-exchange name="amq.direct">
	    <rabbit:bindings>
	        <rabbit:binding key="foo.bar" queue="myQueue"/>
	    </rabbit:bindings>
	</rabbit:direct-exchange> 
	 
	<!-- 메시지를 보내기 위한 template 설정 -->
	<rabbit:template id="rabbitTemplate" connection-factory="rabbitConnectionFactory" exchange="amq.direct" routing-key="foo.bar"/>
	    
	<!-- 메시지 리스너 설정 -->
	<rabbit:listener-container connection-factory="rabbitConnectionFactory">
	    <!-- 큐 myQueue 메시지는 bean id consumer의 method handleMessage가 처리한다 -->
	    <rabbit:listener queues="myQueue" ref="consumer" method="handleMessage"/>
	</rabbit:listener-container>
	
</beans:beans>
